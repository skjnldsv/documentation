.. rst-class:: phpdoctorst

.. role:: php(code)
	:language: php


IExpressionBuilder
==================


.. php:namespace:: OCP\DB\QueryBuilder

.. php:interface:: IExpressionBuilder


	.. rst-class:: phpdoc-description
	
		| This class provides a wrapper around Doctrine\'s ExpressionBuilder
		
	
	:Implemented by:
		:php:class:`OC\\DB\\QueryBuilder\\ExpressionBuilder\\ExpressionBuilder` 
	
	
	:Source:
		`lib/public/DB/QueryBuilder/IExpressionBuilder.php#38 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L38>`_
	

Constants
---------

.. php:const:: EQ = \\Doctrine\\DBAL\\Query\\Expression\\ExpressionBuilder::EQ

	:Source:
		`lib/public/DB/QueryBuilder/IExpressionBuilder.php#42 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L42>`_
	
	:Since: 9.0.0 


.. php:const:: NEQ = \\Doctrine\\DBAL\\Query\\Expression\\ExpressionBuilder::NEQ

	:Source:
		`lib/public/DB/QueryBuilder/IExpressionBuilder.php#46 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L46>`_
	
	:Since: 9.0.0 


.. php:const:: LT = \\Doctrine\\DBAL\\Query\\Expression\\ExpressionBuilder::LT

	:Source:
		`lib/public/DB/QueryBuilder/IExpressionBuilder.php#50 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L50>`_
	
	:Since: 9.0.0 


.. php:const:: LTE = \\Doctrine\\DBAL\\Query\\Expression\\ExpressionBuilder::LTE

	:Source:
		`lib/public/DB/QueryBuilder/IExpressionBuilder.php#54 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L54>`_
	
	:Since: 9.0.0 


.. php:const:: GT = \\Doctrine\\DBAL\\Query\\Expression\\ExpressionBuilder::GT

	:Source:
		`lib/public/DB/QueryBuilder/IExpressionBuilder.php#58 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L58>`_
	
	:Since: 9.0.0 


.. php:const:: GTE = \\Doctrine\\DBAL\\Query\\Expression\\ExpressionBuilder::GTE

	:Source:
		`lib/public/DB/QueryBuilder/IExpressionBuilder.php#62 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L62>`_
	
	:Since: 9.0.0 


Methods
-------

.. rst-class:: public

	.. php:method:: public andX( ...$x)
	
		.. rst-class:: phpdoc-description
		
			| Creates a conjunction of the given boolean expressions\.
			
			| Example:
			| 
			| \[php\]
			| // \(u\.type = ?\) AND \(u\.role = ?\)
			| $expr\-\>andX\(\'u\.type = ?\', \'u\.role = ?\'\)\);
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#81 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L81>`_
		
		
		:Parameters:
			* **$x** (mixed)  Optional clause. Defaults = null, but requires
			at least one defined when converting to string.

		
		:Returns: :any:`\\OCP\\DB\\QueryBuilder\\ICompositeExpression <OCP\\DB\\QueryBuilder\\ICompositeExpression>` 
		:Since: 8.2.0 
	
	

.. rst-class:: public

	.. php:method:: public orX( ...$x)
	
		.. rst-class:: phpdoc-description
		
			| Creates a disjunction of the given boolean expressions\.
			
			| Example:
			| 
			| \[php\]
			| // \(u\.type = ?\) OR \(u\.role = ?\)
			| $qb\-\>where\($qb\-\>expr\(\)\-\>orX\(\'u\.type = ?\', \'u\.role = ?\'\)\);
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#100 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L100>`_
		
		
		:Parameters:
			* **$x** (mixed)  Optional clause. Defaults = null, but requires
			at least one defined when converting to string.

		
		:Returns: :any:`\\OCP\\DB\\QueryBuilder\\ICompositeExpression <OCP\\DB\\QueryBuilder\\ICompositeExpression>` 
		:Since: 8.2.0 
	
	

.. rst-class:: public

	.. php:method:: public comparison( $x, $operator, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a comparison expression\.
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#119 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L119>`_
		
		
		:Parameters:
			* **$x** (mixed)  The left expression.
			* **$operator** (string)  One of the IExpressionBuilder::* constants.
			* **$y** (mixed)  The right expression.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public eq( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates an equality comparison expression with the given arguments\.
			
			| First argument is considered the left expression and the second is the right expression\.
			| When converted to string, it will generated a <left expr\> = <right expr\>\. Example:
			| 
			|     \[php\]
			|     // u\.id = ?
			|     $expr\-\>eq\(\'u\.id\', \'?\'\);
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#143 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L143>`_
		
		
		:Parameters:
			* **$x** (mixed)  The left expression.
			* **$y** (mixed)  The right expression.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public neq( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a non equality comparison expression with the given arguments\.
			
			| First argument is considered the left expression and the second is the right expression\.
			| When converted to string, it will generated a <left expr\> <\> <right expr\>\. Example:
			| 
			|     \[php\]
			|     // u\.id <\> 1
			|     $q\-\>where\($q\-\>expr\(\)\-\>neq\(\'u\.id\', \'1\'\)\);
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#166 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L166>`_
		
		
		:Parameters:
			* **$x** (mixed)  The left expression.
			* **$y** (mixed)  The right expression.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public lt( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a lower\-than comparison expression with the given arguments\.
			
			| First argument is considered the left expression and the second is the right expression\.
			| When converted to string, it will generated a <left expr\> < <right expr\>\. Example:
			| 
			|     \[php\]
			|     // u\.id < ?
			|     $q\-\>where\($q\-\>expr\(\)\-\>lt\(\'u\.id\', \'?\'\)\);
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#189 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L189>`_
		
		
		:Parameters:
			* **$x** (mixed)  The left expression.
			* **$y** (mixed)  The right expression.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public lte( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a lower\-than\-equal comparison expression with the given arguments\.
			
			| First argument is considered the left expression and the second is the right expression\.
			| When converted to string, it will generated a <left expr\> <= <right expr\>\. Example:
			| 
			|     \[php\]
			|     // u\.id <= ?
			|     $q\-\>where\($q\-\>expr\(\)\-\>lte\(\'u\.id\', \'?\'\)\);
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#212 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L212>`_
		
		
		:Parameters:
			* **$x** (mixed)  The left expression.
			* **$y** (mixed)  The right expression.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public gt( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a greater\-than comparison expression with the given arguments\.
			
			| First argument is considered the left expression and the second is the right expression\.
			| When converted to string, it will generated a <left expr\> \> <right expr\>\. Example:
			| 
			|     \[php\]
			|     // u\.id \> ?
			|     $q\-\>where\($q\-\>expr\(\)\-\>gt\(\'u\.id\', \'?\'\)\);
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#235 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L235>`_
		
		
		:Parameters:
			* **$x** (mixed)  The left expression.
			* **$y** (mixed)  The right expression.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public gte( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a greater\-than\-equal comparison expression with the given arguments\.
			
			| First argument is considered the left expression and the second is the right expression\.
			| When converted to string, it will generated a <left expr\> \>= <right expr\>\. Example:
			| 
			|     \[php\]
			|     // u\.id \>= ?
			|     $q\-\>where\($q\-\>expr\(\)\-\>gte\(\'u\.id\', \'?\'\)\);
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#258 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L258>`_
		
		
		:Parameters:
			* **$x** (mixed)  The left expression.
			* **$y** (mixed)  The right expression.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public isNull( $x)
	
		.. rst-class:: phpdoc-description
		
			| Creates an IS NULL expression with the given arguments\.
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#270 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L270>`_
		
		
		:Parameters:
			* **$x** (string | :any:`\\OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>`)  The field in string format to be restricted by IS NULL.

		
		:Returns: string 
		:Since: 8.2.0 
	
	

.. rst-class:: public

	.. php:method:: public isNotNull( $x)
	
		.. rst-class:: phpdoc-description
		
			| Creates an IS NOT NULL expression with the given arguments\.
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#282 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L282>`_
		
		
		:Parameters:
			* **$x** (string | :any:`\\OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>`)  The field in string format to be restricted by IS NOT NULL.

		
		:Returns: string 
		:Since: 8.2.0 
	
	

.. rst-class:: public

	.. php:method:: public like( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a LIKE\(\) comparison expression with the given arguments\.
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#299 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L299>`_
		
		
		:Parameters:
			* **$x** (:any:`OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>` | string)  Field in string format to be inspected by LIKE() comparison.
			* **$y** (mixed)  Argument to be used in LIKE() comparison.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public notLike( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a NOT LIKE\(\) comparison expression with the given arguments\.
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#316 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L316>`_
		
		
		:Parameters:
			* **$x** (:any:`OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>` | string)  Field in string format to be inspected by NOT LIKE() comparison.
			* **$y** (mixed)  Argument to be used in NOT LIKE() comparison.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public iLike( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a ILIKE\(\) comparison expression with the given arguments\.
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#333 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L333>`_
		
		
		:Parameters:
			* **$x** (string)  Field in string format to be inspected by ILIKE() comparison.
			* **$y** (mixed)  Argument to be used in ILIKE() comparison.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 9.0.0 
	
	

.. rst-class:: public

	.. php:method:: public in( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a IN \(\) comparison expression with the given arguments\.
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#350 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L350>`_
		
		
		:Parameters:
			* **$x** (:any:`OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>` | string)  The field in string format to be inspected by IN() comparison.
			* **$y** (:any:`OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>` | string | array)  The placeholder or the array of values to be used by IN() comparison.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public notIn( $x, $y, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Creates a NOT IN \(\) comparison expression with the given arguments\.
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#367 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L367>`_
		
		
		:Parameters:
			* **$x** (:any:`OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>` | string)  The field in string format to be inspected by NOT IN() comparison.
			* **$y** (:any:`OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>` | string | array)  The placeholder or the array of values to be used by NOT IN() comparison.
			* **$type** (mixed | null)  one of the IQueryBuilder::PARAM_* constants
			required when comparing text fields for oci compatibility

		
		:Returns: string 
		:Since: 8.2.0 \- Parameter $type was added in 9\.0\.0
	
	

.. rst-class:: public

	.. php:method:: public emptyString( $x)
	
		.. rst-class:: phpdoc-description
		
			| Creates a $x = \'\' statement, because Oracle needs a different check
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#378 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L378>`_
		
		
		:Parameters:
			* **$x** (string | :any:`\\OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>`)  The field in string format to be inspected by the comparison.

		
		:Returns: string 
		:Since: 13.0.0 
	
	

.. rst-class:: public

	.. php:method:: public nonEmptyString( $x)
	
		.. rst-class:: phpdoc-description
		
			| Creates a \`$x <\> \'\'\` statement, because Oracle needs a different check
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#389 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L389>`_
		
		
		:Parameters:
			* **$x** (string | :any:`\\OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` | :any:`\\OCP\\DB\\QueryBuilder\\IParameter <OCP\\DB\\QueryBuilder\\IParameter>` | :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>`)  The field in string format to be inspected by the comparison.

		
		:Returns: string 
		:Since: 13.0.0 
	
	

.. rst-class:: public

	.. php:method:: public bitwiseAnd( $x, $y)
	
		.. rst-class:: phpdoc-description
		
			| Creates a bitwise AND comparison
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#403 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L403>`_
		
		
		:Parameters:
			* **$x** (string | :any:`\\OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>`)  The field or value to check
			* **$y** (int)  Bitmap that must be set

		
		:Returns: :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>` 
		:Since: 12.0.0 
	
	

.. rst-class:: public

	.. php:method:: public bitwiseOr( $x, $y)
	
		.. rst-class:: phpdoc-description
		
			| Creates a bitwise OR comparison
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#416 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L416>`_
		
		
		:Parameters:
			* **$x** (string | :any:`\\OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>`)  The field or value to check
			* **$y** (int)  Bitmap that must be set

		
		:Returns: :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>` 
		:Since: 12.0.0 
	
	

.. rst-class:: public

	.. php:method:: public literal( $input, $type=null)
	
		.. rst-class:: phpdoc-description
		
			| Quotes a given input parameter\.
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#430 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L430>`_
		
		
		:Parameters:
			* **$input** (mixed)  The parameter to be quoted.
			* **$type** (mixed | null)  One of the IQueryBuilder::PARAM_* constants

		
		:Returns: :any:`\\OCP\\DB\\QueryBuilder\\ILiteral <OCP\\DB\\QueryBuilder\\ILiteral>` 
		:Since: 8.2.0 
	
	

.. rst-class:: public

	.. php:method:: public castColumn( $column, $type)
	
		.. rst-class:: phpdoc-description
		
			| Returns a IQueryFunction that casts the column to the given type
			
		
		:Source:
			`lib/public/DB/QueryBuilder/IExpressionBuilder.php#443 <https://github.com/nextcloud/server/blob/stable13/lib/public/DB/QueryBuilder/IExpressionBuilder.php#L443>`_
		
		
		:Parameters:
			* **$column** (string)  
			* **$type** (mixed)  One of IQueryBuilder::PARAM_*

		
		:Returns: :any:`\\OCP\\DB\\QueryBuilder\\IQueryFunction <OCP\\DB\\QueryBuilder\\IQueryFunction>` 
		:Since: 9.0.0 
	
	

