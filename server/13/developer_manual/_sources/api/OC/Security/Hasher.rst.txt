.. rst-class:: phpdoctorst

.. role:: php(code)
	:language: php


Hasher
======


.. php:namespace:: OC\Security

.. php:class:: Hasher


	.. rst-class:: phpdoc-description
	
		| Class Hasher provides some basic hashing functions\. Furthermore, it supports legacy hashes
		| used by previous versions of ownCloud and helps migrating those hashes to newer ones\.
		
		| The hashes generated by this class are prefixed \(version\|hash\) with a version parameter to allow possible
		| updates in the future\.
		| Possible versions:
		| 	\- 1 \(Initial version\)
		| 
		| Usage:
		| // Hashing a message
		| $hash = \\OC::$server\-\>getHasher\(\)\-\>hash\(\'MessageToHash\'\);
		| // Verifying a message \- $newHash will contain the newly calculated hash
		| $newHash = null;
		| var\_dump\(\\OC::$server\-\>getHasher\(\)\-\>verify\(\'a\', \'86f7e437faa5a7fce15d1ddcb9eaeaea377667b8\', $newHash\)\);
		| var\_dump\($newHash\);
		
	
	:Source:
		`lib/private/Security/Hasher.php#55 <https://github.com/nextcloud/server/blob/stable13/lib/private/Security/Hasher.php#L55>`_
	
	:Implements:
		:php:interface:`OCP\\Security\\IHasher` 
	

Properties
----------

Methods
-------

.. rst-class:: public

	.. php:method:: public __construct( $config)
	
		:Source:
			`lib/private/Security/Hasher.php#66 <https://github.com/nextcloud/server/blob/stable13/lib/private/Security/Hasher.php#L66>`_
		
		
		:Parameters:
			* **$config** (:any:`OCP\\IConfig <OCP\\IConfig>`)  

		
	
	

.. rst-class:: public

	.. php:method:: public hash( $message)
	
		.. rst-class:: phpdoc-description
		
			| Hashes a message using PHP\'s \`password\_hash\` functionality\.
			
			| Please note that the size of the returned string is not guaranteed
			| and can be up to 255 characters\.
			
		
		:Source:
			`lib/private/Security/Hasher.php#92 <https://github.com/nextcloud/server/blob/stable13/lib/private/Security/Hasher.php#L92>`_
		
		
		:Parameters:
			* **$message** (string)  Message to generate hash from

		
		:Returns: string Hash of the message with appended version parameter
	
	

.. rst-class:: protected

	.. php:method:: protected splitHash( $prefixedHash)
	
		.. rst-class:: phpdoc-description
		
			| Get the version and hash from a prefixedHash
			
		
		:Source:
			`lib/private/Security/Hasher.php#111 <https://github.com/nextcloud/server/blob/stable13/lib/private/Security/Hasher.php#L111>`_
		
		
		:Parameters:
			* **$prefixedHash** (string)  

		
		:Returns: null | array Null if the hash is not prefixed, otherwise array\(\'version\' =\> 1, \'hash\' =\> \'foo\'\)
	
	

.. rst-class:: protected

	.. php:method:: protected legacyHashVerify( $message, $hash, &$newHash=null)
	
		.. rst-class:: phpdoc-description
		
			| Verify legacy hashes
			
		
		:Source:
			`lib/private/Security/Hasher.php#129 <https://github.com/nextcloud/server/blob/stable13/lib/private/Security/Hasher.php#L129>`_
		
		
		:Parameters:
			* **$message** (string)  Message to verify
			* **$hash** (string)  Assumed hash of the message

		
		:Returns: bool Whether $hash is a valid hash of $message
	
	

.. rst-class:: protected

	.. php:method:: protected verifyHash( $message, $hash, &$newHash=null)
	
		.. rst-class:: phpdoc-description
		
			| Verify V1 \(blowfish\) hashes
			| Verify V2 \(argon2i\) hashes
			| Verify V3 \(argon2id\) hashes
			
		
		:Source:
			`lib/private/Security/Hasher.php#154 <https://github.com/nextcloud/server/blob/stable13/lib/private/Security/Hasher.php#L154>`_
		
		
		:Parameters:
			* **$message** (string)  Message to verify
			* **$hash** (string)  Assumed hash of the message

		
		:Returns: bool Whether $hash is a valid hash of $message
	
	

.. rst-class:: public

	.. php:method:: public verify( $message, $hash, &$newHash=null)
	
		:Source:
			`lib/private/Security/Hasher.php#171 <https://github.com/nextcloud/server/blob/stable13/lib/private/Security/Hasher.php#L171>`_
		
		
		:Parameters:
			* **$message** (string)  Message to verify
			* **$hash** (string)  Assumed hash of the message

		
		:Returns: bool Whether $hash is a valid hash of $message
	
	

